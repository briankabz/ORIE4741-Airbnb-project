N=3;
u=2;
d=3/4;
r=3/8;
s0=8;
Strike=9;
s=zeros(N+1,N+1);
payoff=zeros(N+1,N+1);
p=(1+r-d)/(u-d);
q=1-p;
for k=1:1:N+1
    for j=1:1:k
      if j==1 && k==1
          s(j,k)=s0;
      elseif j~=k
          s(j,k)=s(j,k-1)*u;
      else
          s(j,k)=s(j-1,k-1)*d;
      end
    end
end
for k=(N+1):-1:1
    for j=1:1:k
        if k==(N+1)
           payoff(j,k)=max(s(j,k)-Strike,0);
        else 
           payoff(j,k)=(payoff(j,k+1)*p+payoff(j+1,k+1)*q)/(1+r); 
        end
    end
end
option=payoff(1,1)
delta=zeros(N,N);
for k=1:1:N
    for j=1:1:k
        delta(j,k)=(payoff(j,k+1)-payoff(j+1,k+1))/s(j,k)/(u-d);
    end
end
yita=zeros(N,N);
for k=1:1:N
    for j=1:1:k
        yita(j,k)=(payoff(j,k)-delta(j,k)*s(j,k))/(1+r)^(k-1);
    end
end   



%%simulate under real probability
real_p=0.4;
real_s=[s0];
real_s_k=s0;
flag_matrix=[];
for k=1:1:N
    u=unifrnd(0,1);
    if u<=real_p
        real_s_k=real_s_k*u;
        flag=0;
    else
        real_s_k=real_s_k*d;
        flag=1;
    end
    real_s=[real_s,real_s_k];
    flag_matrix=[flag_matrix,flag];
end
find_row=sum(flag_matrix)+1;
find_row_before=sum(flag_matrix(1:end-1))+1;
payoff_p=s(find_row,N+1)*delta(find_row_before,N)+yita(find_row_before,N)*(1+r)^N;
if payoff_p==payoff(find_row,N+1)
    fprintf('equate')
else